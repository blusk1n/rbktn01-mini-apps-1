const express = require('express');
var bodyParser = require('body-parser');

let app = express();

app.use(express.static('compiled/client'));
let PORT = 5000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

app.listen(PORT, function () {
  console.log(`listening on PORT ${PORT}`);
});
const mongoose = require("mongoose");
mongoose.connect('mongodb://localhost/test', { useNewUrlParser: true });

const Schema = mongoose.Schema;
var nameSchema = new Schema({
  name: String,
  email: String,
  password: String,
  line1: String,
  line2: String,
  city: String,
  state: String,
  zipCode: String,
  phone: String,
  nameonCard: String,
  cardNum: String,
  expMonth: String,
  expYear: String,
  cvv: String

});
var Users = mongoose.model("Users", nameSchema);

app.post('/', (req, res) => {
  var product = new Users(req.body);
  res.sendStatus(200);
  product.save(function (err) {
    if (err) return console.error(err);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImJvZHlQYXJzZXIiLCJhcHAiLCJ1c2UiLCJzdGF0aWMiLCJQT1JUIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciLCJtb25nb29zZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJTY2hlbWEiLCJuYW1lU2NoZW1hIiwibmFtZSIsIlN0cmluZyIsImVtYWlsIiwicGFzc3dvcmQiLCJsaW5lMSIsImxpbmUyIiwiY2l0eSIsInN0YXRlIiwiemlwQ29kZSIsInBob25lIiwibmFtZW9uQ2FyZCIsImNhcmROdW0iLCJleHBNb250aCIsImV4cFllYXIiLCJjdnYiLCJVc2VycyIsIm1vZGVsIiwicG9zdCIsInJlcSIsInJlcyIsInByb2R1Y3QiLCJib2R5Iiwic2VuZFN0YXR1cyIsInNhdmUiLCJlcnIiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsSUFBSUMsYUFBYUQsUUFBUSxhQUFSLENBQWpCOztBQUdBLElBQUlFLE1BQU1ILFNBQVY7O0FBRUFHLElBQUlDLEdBQUosQ0FBUUosUUFBUUssTUFBUixDQUFlLGlCQUFmLENBQVI7QUFDQSxJQUFJQyxPQUFRLElBQVo7O0FBRUFILElBQUlDLEdBQUosQ0FBUUYsV0FBV0ssVUFBWCxDQUFzQixFQUFFQyxVQUFVLElBQVosRUFBdEIsQ0FBUjtBQUNBTCxJQUFJQyxHQUFKLENBQVFGLFdBQVdPLElBQVgsRUFBUjs7QUFHQU4sSUFBSU8sTUFBSixDQUFXSixJQUFYLEVBQWlCLFlBQVc7QUFDeEJLLFVBQVFDLEdBQVIsQ0FBYSxxQkFBb0JOLElBQUssRUFBdEM7QUFDRCxDQUZIO0FBR0UsTUFBTU8sV0FBV1osUUFBUSxVQUFSLENBQWpCO0FBQ0FZLFNBQVNDLE9BQVQsQ0FBaUIsMEJBQWpCLEVBQTZDLEVBQUNDLGlCQUFpQixJQUFsQixFQUE3Qzs7QUFFQSxNQUFNQyxTQUFTSCxTQUFTRyxNQUF4QjtBQUNBLElBQUlDLGFBQWMsSUFBSUQsTUFBSixDQUFXO0FBQzNCRSxRQUFLQyxNQURzQjtBQUUzQkMsU0FBTUQsTUFGcUI7QUFHM0JFLFlBQVNGLE1BSGtCO0FBSTNCRyxTQUFNSCxNQUpxQjtBQUszQkksU0FBTUosTUFMcUI7QUFNM0JLLFFBQUtMLE1BTnNCO0FBTzNCTSxTQUFNTixNQVBxQjtBQVEzQk8sV0FBUVAsTUFSbUI7QUFTM0JRLFNBQU1SLE1BVHFCO0FBVTNCUyxjQUFXVCxNQVZnQjtBQVczQlUsV0FBUVYsTUFYbUI7QUFZM0JXLFlBQVNYLE1BWmtCO0FBYTNCWSxXQUFRWixNQWJtQjtBQWMzQmEsT0FBSWI7O0FBZHVCLENBQVgsQ0FBbEI7QUFpQkMsSUFBSWMsUUFBUXBCLFNBQVNxQixLQUFULENBQWUsT0FBZixFQUF3QmpCLFVBQXhCLENBQVo7O0FBRURkLElBQUlnQyxJQUFKLENBQVMsR0FBVCxFQUFjLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzFCLE1BQUlDLFVBQVUsSUFBSUwsS0FBSixDQUFVRyxJQUFJRyxJQUFkLENBQWQ7QUFDQUYsTUFBSUcsVUFBSixDQUFlLEdBQWY7QUFDQUYsVUFBUUcsSUFBUixDQUFhLFVBQVVDLEdBQVYsRUFBZ0I7QUFDekIsUUFBSUEsR0FBSixFQUFTLE9BQU8vQixRQUFRZ0MsS0FBUixDQUFjRCxHQUFkLENBQVA7QUFFVixHQUhIO0FBSUMsQ0FQSCIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpXG5cblxubGV0IGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShleHByZXNzLnN0YXRpYygnY29tcGlsZWQvY2xpZW50JykpO1xubGV0IFBPUlQgPSAgNTAwMDtcblxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKVxuXG5cbmFwcC5saXN0ZW4oUE9SVCwgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coYGxpc3RlbmluZyBvbiBQT1JUICR7UE9SVH1gKTtcbiAgfSk7XG4gIGNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xuICBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vbG9jYWxob3N0L3Rlc3QnLCB7dXNlTmV3VXJsUGFyc2VyOiB0cnVlfSk7XG5cbiAgY29uc3QgU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hO1xuICB2YXIgbmFtZVNjaGVtYSA9ICBuZXcgU2NoZW1hKHtcbiAgICBuYW1lOlN0cmluZyxcbiAgICBlbWFpbDpTdHJpbmcsXG4gICAgcGFzc3dvcmQ6U3RyaW5nLFxuICAgIGxpbmUxOlN0cmluZyxcbiAgICBsaW5lMjpTdHJpbmcsXG4gICAgY2l0eTpTdHJpbmcsXG4gICAgc3RhdGU6U3RyaW5nLFxuICAgIHppcENvZGU6U3RyaW5nLFxuICAgIHBob25lOlN0cmluZyxcbiAgICBuYW1lb25DYXJkOlN0cmluZyxcbiAgICBjYXJkTnVtOlN0cmluZyxcbiAgICBleHBNb250aDpTdHJpbmcsXG4gICAgZXhwWWVhcjpTdHJpbmcsXG4gICAgY3Z2OlN0cmluZyxcblxuICAgfSk7XG4gICB2YXIgVXNlcnMgPSBtb25nb29zZS5tb2RlbChcIlVzZXJzXCIsIG5hbWVTY2hlbWEpO1xuXG4gIGFwcC5wb3N0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgdmFyIHByb2R1Y3QgPSBuZXcgVXNlcnMocmVxLmJvZHkpXG4gICAgcmVzLnNlbmRTdGF0dXMoMjAwKTtcbiAgICBwcm9kdWN0LnNhdmUoZnVuY3Rpb24gKGVyciApIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgXG4gICAgICB9KTtcbiAgICB9KVxuIl19